<html>
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8">
<title>Documentation FsprgEmbeddedStoreSDK</title>
<link rel='stylesheet' href='README/style.css' type='text/css'/>
<script src='README/jquery-1.4.2.js'></script>
<script src='README/readme.js'></script>
</head>
<body>

<img id="logo" src="README/fastspring_logo.png"/>

<h1 id='header'>FastSpring Embedded Store SDK</h1>
<div id='summary'></div>



# Introduction #
<span class="abstract">Introduction to FastSpring's embedded store SDK.</span>

FastSpring's embedded store consists of a controller with some integration points and WebKit's web view. It's thin and very flexible and lets you integrate FastSpring the way that fits best for your application.

To get an idea of how it works the SDK provides two examples and a test application. FastSpring also provides [FsprgEmbeddedStore framework's source code](src/FsprgEmbeddedStore) to ease debugging and to give you a better understanding of what happens behind the scenes. There are separate framework builds for 10.4 and 10.5+. The test application is 10.5+ only and the examples are available as source code. All source code is released under the [MIT license](License.txt). It is open to contributions and its use is unrestricted.



# FsprgEmbeddedStore.framework #
<span class="abstract">Cocoa Framework to integrate the FastSpring store.</span>

The FsprgEmbeddedStore framework consists mainly out of the `FsprgEmbeddedStoreController` and its delegate protocol, `FsprgEmbeddedStoreDelegate`.

The `FsprgEmbeddedStoreController` controls the connected `WebView` (WebKit). It provides functionality to load the store, to monitor the page loading progress and to test if the current connection is secure (https).

	@interface FsprgEmbeddedStoreController : NSObject
		- (WebView *)webView;
		- (void)setWebView:(WebView *)aWebView;
		- (id <FsprgEmbeddedStoreDelegate>)delegate;
		- (void)setDelegate:(id <FsprgEmbeddedStoreDelegate>)aDelegate;

		- (void)loadWithParameters:(FsprgStoreParameters *)parameters;
		- (void)loadWithContentsOfFile:(NSString *)aPath;
		- (BOOL)isLoading;
		- (double)estimatedLoadingProgress;
		- (BOOL)isSecure;
	@end

In addition, it has some integration points defined by the `FsprgEmbeddedStoreDelegate` protocol. It gives notification of the initial load of the store and of order completion. There's also the possibility to define a view to present the order confirmation to the user.

	@protocol FsprgEmbeddedStoreDelegate <NSObject>
		- (void)didLoadStore;
		- (void)didReceiveOrder:(FsprgOrder *)order;
		- (NSView *)viewWithFrame:(NSRect)frame forOrder:(FsprgOrder *)order;
	@end


## How-to embed the framework ##

* Drag FsprgEmbeddedStore.framework to Linked Frameworks  
  Uncheck "Copy items into destination ..."  
  Reference Type: Relative to Project
* Add "Copy Files" Build Phase  
  Destination: Frameworks  
  Path: <empty>
* Rename Build Phase to "Copy Frameworks"
* Drag FsprgEmbeddedStore.framework to that Build Phase


## How-to use the framework ##

* Create an `AppController` and use `FsprgEmbeddedStoreController`. Example1.app and Example2.app are providing examples how to implement the `AppController` in detail.
* Open MainMenu.nib
* Create an instance of `AppController` inside Interface Builder
* Drag WebKit control onto screen and connect it to the storeView Outlet of `AppController`

### Example: AppController.h ###

	@interface AppController : NSObject <FsprgEmbeddedStoreDelegate> {
		IBOutlet WebView* storeView;
		FsprgEmbeddedStoreController *storeController;
	}

	- (FsprgEmbeddedStoreController *)storeController;
	- (void)setStoreController:(FsprgEmbeddedStoreController *)aStoreController;

	- (IBAction)load:(id)sender;

	@end


## How-to provide a link to the web-store ##

Sometimes users prefer to use a web-store instead of an embedded-store. Use `FsprgStoreParameters` to build the web-store URL and open it inside the default browser by using `NSWorkspace`.

	- (IBAction)openWebStoreInBrowser:(id)sender
	{
		FsprgStoreParameters *parameters = [FsprgStoreParameters parameters];
		[parameters setOrderProcessType:kFsprgOrderProcessDetail];
		[parameters setStoreId:@"your_store" withProductId:@"your_product"];
		[parameters setMode:kFsprgModeTest];
		[[NSWorkspace sharedWorkspace] openURL:[parameters toURL]];
	}


## FsprgOrder API ##

The FsprgOrder object represents the order confirmation returned via `FsprgEmbeddedStoreDelegate` protocol. To spare you plunging through the headers the following sections contain a real-life example and a compressed API documentation of FsprgOrder and its referred classes.

### Example ###

Here's a real-life example to show the most common case of grabbing the serial number from the fulfilled license. _Thanks to Greg Scown from [SmileOnMyMac](http://www.smileonmymac.com) for sharing._

	- (void)didReceiveOrder:(FsprgOrder *)order
	{
	   NSEnumerator *e = [[order orderItems] objectEnumerator];
	   FsprgOrderItem *item = nil;
	   while (item = [e nextObject]) {
	       if ([[item productName] hasPrefix:@"MyItemNamePrefix") {
	           NSString *userName = [[item license] licenseName];
	           NSString *serialNumber = [[item license] firstLicenseCode];
	           if ([[[item productName] lowercaseString] rangeOfString:@"upgrade"].location != NSNotFound) {
	               NSLog(@"Upgrade purchase:\nName: %@\nSerial #: %@", userName, serialNumber);
	           } else {
	               NSLog(@"Full purchase:\nName: %@\nSerial #: %@",	userName, serialNumber);
	           }
	       }
	   }
	}

### FsprgOrder.h ###

	- (BOOL)orderIsTest;
	- (NSString *)orderReference;
	- (NSString *)orderLanguage;
	- (NSString *)orderCurrency;
	- (NSNumber *)orderTotal;
	- (NSString *)customerFirstName;
	- (NSString *)customerLastName;
	- (NSString *)customerCompany;
	- (NSString *)customerEmail;
	- (FsprgOrderItem *)firstOrderItem; // Shortcut for [[self orderItems] objectAtIndex:0].
	- (NSArray *)orderItems;

### FsprgOrderItem.h ###

	- (NSString *)productName;
	- (NSString *)productDisplay;
	- (NSNumber *)quantity;
	- (FsprgFulfillment *)fulfillment;
	- (FsprgLicense *)license;         // Shortcut for [[self fulfillment] valueForKey:@"license"]
	- (FsprgFileDownload *)download;   // Shortcut for [[self fulfillment] valueForKey:@"download"]

### FsprgFulfillment.h ###

	/*!
	 * @param aKey type of fulfillment (e.g. license, download)
	 * @result Specific fulfillment information (FsprgLicense, FsprgFileDownload).
	 */
	- (id)valueForKey:(NSString *)aKey;

### FsprgLicense.h ###

	- (NSString *)licenseName;
	- (NSString *)licenseEmail;
	- (NSString *)licenseCompany;
	- (NSString *)firstLicenseCode;
	- (NSArray *)licenseCodes;
	- (NSDictionary *)licensePropertyList;
	- (NSURL *)licenseURL;

### FsprgFileDownload.h ###

	- (NSURL *)fileURL;



# Example1.app #
<span class="abstract">Defaults contact fields and order confirmation is a View XIB built inside Interface Builder.</span>

Example1 app defaults contact fields by accessing MacOS' AddressBook. The order confirmation is a View XIB built inside Interface Builder.

![Example1.app Screenshot](README/example1_screenshot.png "Example1.app Screenshot")


## How-to implement the AppController ##

* Set self as delegate on `init`
* Set webView to `FsprgEmbeddedStoreController` on `awakeFromNib`
* Delegate `load:` to `loadWithParameters:` of `FsprgEmbeddedStoreController`
* Implement `viewWithFrame:forOrder:` by using a `NSViewController` (here `OrderViewController`) that uses the View XIB defined inside Interface Builder

### Extract from AppController.h ###

	@implementation AppController

	- (id) init
	{
		self = [super init];
		if (self != nil) {
			[self setStoreController:[[[FsprgEmbeddedStoreController alloc] init] autorelease]];
			[[self storeController] setDelegate:self];
		}
		return self;
	}

	- (void)awakeFromNib
	{
		[[self storeController] setWebView:storeView];
		[self load:nil];
	}

	- (IBAction)load:(id)sender
	{
		FsprgStoreParameters *parameters = [FsprgStoreParameters parameters];
		...
		[[self storeController] loadWithParameters:parameters];
	}

	- (NSView *)viewWithFrame:(NSRect)frame forOrder:(FsprgOrder *)order
	{
		OrderViewController *orderViewController = [[OrderViewController alloc] initWithNibName:@"OrderView" bundle:nil];
		[orderViewController setRepresentedObject:order];

		[[orderViewController view] setFrame:frame];
		return [orderViewController view];
	}

	@end


## How-to create the View XIB ##

* Create class `OrderViewController` by extending `NSViewController`
* Create View XIB
* Set File’s Owner class to `OrderViewController`
* Assign File’s Owner view Outlet to the main "Custom View"
* Bind controls (e.g. label) to File’s Owner representedObject (= `FSOrder`) to present order confirmation data to the user



# Example2.app #
<span class="abstract">Order confirmation is built by using HTML, CSS and JavaScript.</span>

Example2 presents the order confirmation by using HTML, CSS and JavaScript. It uses Matt Gemmell's [MGTemplateEngine](http://mattgemmell.com/2008/05/20/mgtemplateengine-templates-with-cocoa) to render the HTML.

![Example2.app Screenshot](README/example2_screenshot.png "Example2.app Screenshot")


## How-To create order HTML view ##

The AppController looks like the one in Example1. The only difference is the `viewWithFrame:forOrder:` implementation. It uses `WebFrame`'s `loadHTMLString:baseURL:` method to load the HTML and present it to the user.

### Extract from AppController.h ###

	@implementation AppController

	- (NSView *)viewWithFrame:(NSRect)frame forOrder:(FsprgOrder *)order
	{
		MGTemplateEngine *engine = [MGTemplateEngine templateEngine];
		[engine setMatcher:[ICUTemplateMatcher matcherWithTemplateEngine:engine]];
	
		NSString *templatePath = [[NSBundle mainBundle] pathForResource:@"OrderView" ofType:@"html"];
		NSDictionary *variables = [NSDictionary dictionaryWithObject:order forKey:@"order"];
		NSString *htmlString = [engine processTemplateInFileAtPath:templatePath withVariables:variables];

		NSString *templateDirectory = [templatePath substringToIndex:[templatePath length]-[[templatePath lastPathComponent] length]];
		NSURL *baseURL = [NSURL URLWithString:[NSString stringWithFormat:@"file://%@", templateDirectory]];
	
		WebFrame *webFrame = [[[WebView alloc] initWithFrame:frame] mainFrame];
		[webFrame loadHTMLString:htmlString baseURL:baseURL];
	
		return [webFrame frameView];
	}

	@end

As we set `FsprgOrder` to a variable we can now conveniently access the order information inside the template. The baseURL points to the Resource directory. Thus, we can access CSS files to style the view and JavaScript to add some behavior and nice effects.

### OrderView.html ###

	<html>
		<head>
			<meta http-equiv='Content-Type' content='text/html; charset=UTF-8' />
			<title>Your Order</title>
			<link rel="stylesheet" type="text/css" href="OrderView.css">
			<script src="jquery-1.4.2.js"></script>
			<script language="javascript">
				$(function() {
					$(".orderItemsTitle").fadeIn(2000);
					$(".orderItem").fadeIn(2000);
				});
			</script>
		</head>
		<body>
			<div class="thankYouNote">Thanks for your order {{ order.customerFirstName }}!</div>
			<div class="orderItemsTitle">Ordered items</div>
			{% for orderItem in order.orderItems %}
			<div class="orderItem">
				<div class="productName">
				{{ orderItem.productName }}
				{% if orderItem.quantity > 1 %} ({{ orderItem.quantity }}) {% /if %}
				</div>
				<div class="licenseKey">Your license key: {{ orderItem.license.firstLicenseCode }}</div>
			</div>
			{% /for %}
		</body>
	</html>



# Test.app #
<span class="abstract">Explore FastSpring's parameters and shows you the native order confirmation result.</span>

The Test application lets you explore FastSpring's parameters and shows you the native order confirmation result (XML plist format).

![Test.app Settings Screenshot](README/testapp_settings_screenshot.png "Test.app Settings Screenshot")
![Test.app Results Screenshot](README/testapp_results_screenshot.png "Test.app Results Screenshot")

You can also store that confirmation result as a plist file and load it by using the `FsprgEmbeddedStoreController`'s `loadWithContentsOfFile:` method. It simplifies the development and testing of the order confirmation view.

</body></html>